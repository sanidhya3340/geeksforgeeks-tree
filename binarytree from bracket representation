#include<bits/stdc++.h>
using namespace std;

struct node {
    int data;
    struct node* left;
    struct node* right;
};

node* createnode(int data) {
    node* newnode = (node*)malloc(sizeof(node));
    newnode->data = data;
    newnode->left = newnode->right = NULL;
    return newnode;
}

void preorder(node* root) {
    if(!root) return;
    cout<<root->data<<" ";
    preorder(root->left);
    preorder(root->right);
}


int findIndex(string str, int si, int ei) {
    if(si>ei) return -1;

    stack<char>s;
    for(int i = si; i <= ei ; i++) {
        if(str[i] == '(') s.push(str[i]);
        else if(str[i] == ')') {
            if(s.top() == '(') {
                s.pop();
                if(s.empty()) return i;
            }
        }
    }
    return -1;
}


node* stringtotree(string s, int si, int ei) {

    if(si>ei) return NULL;
    
    int index = -1;
    
    node* root = createnode(s[si]-'0');

    if(si + 1 <= ei && s[si+1] == '(')
        index = findIndex(s, si+1 , ei);

    if(index != -1) {
        root->left = stringtotree(s, si+2, index-1);
        root->right = stringtotree(s, index+2, ei-1);
    }

    return root;
}

int main(){
    string s = "4(2(3)(1))(6(5))";
    struct node* root = stringtotree(s, 0, s.length() - 1);

    preorder(root);
    return 0;
}
