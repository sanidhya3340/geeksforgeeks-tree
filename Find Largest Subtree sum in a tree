#include<bits/stdc++.h>
using namespace std;

struct node{
    int data;
    node *left,*right;
};

node* newNode(int data) {
    node* temp = (node*)malloc(sizeof(node));
    temp->data = data;
    temp->left = NULL;
    temp->right = NULL;
    return temp;
}

int findLargestSubtreeSumUtil(node* root, int &ans) {
    if(!root) return 0;

    int currSum = root->data + findLargestSubtreeSumUtil(root->left,ans) + findLargestSubtreeSumUtil(root->right, ans);

    ans = max(ans, currSum);
    cout<<ans<<","<<currSum<<endl;
    return currSum;
}

int findLargestSubtreeSum(node* root) {
    if(!root) return 0;
    int ans = INT_MIN;

    findLargestSubtreeSumUtil(root,ans);
    return ans;
}


int main() {

    node* root = newNode(1);
    root->left = newNode(-2);
    root->right = newNode(3);
    root->left->left = newNode(4);
    root->left->right = newNode(5);
    root->right->left = newNode(-6);
    root->right->right = newNode(2);

    cout<<findLargestSubtreeSum(root);

    return 0;
}


outpu:7
